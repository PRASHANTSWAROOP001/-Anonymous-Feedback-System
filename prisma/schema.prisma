// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id Int  @id @default(autoincrement())
  name String 
  email String @unique
  password String // must be hashed
  dob DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topics Topic[] // one to many relationship Admin can add multiple Topics For Feedback

  emails Email[] // admin can now add multiple emails 

}

model Topic{
  id Int @id @default(autoincrement())
  title String 
  description String 
  createdAt DateTime @default(now())
  adminId Int 
  admin Admin @relation(fields: [adminId],references: [id] )
  tokens Token[] // using topic now we should be able to get to the Tokens
  feedbacks Feedback[] // access to feedback table
  emails Email[]
}

model Email{
  id Int @id @default(autoincrement())
  email String @unique
  name String?
  adminId Int
  admin Admin @relation(fields: [adminId] ,references: [id])
  topicId Int

  topic Topic @relation(fields: [topicId], references: [id])

}

model Token{
  id Int @id @default(autoincrement())
  token String @unique
  isUsed Boolean @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime 
  topicId Int
  topic Topic @relation(fields: [topicId], references: [id]) 
}

model Feedback{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  rating Int
  review String
  topicId Int
  topic Topic @relation(fields: [topicId], references: [id])
}
